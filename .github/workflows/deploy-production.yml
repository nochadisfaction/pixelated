name: Deployment Production

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

env:
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:
  setup:
    name: Setup Versions
    uses: ./.github/workflows/setup-versions.yml

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: Setup environment for build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
        run: |
          echo "Creating .env file for build"
          echo "NODE_ENV=production" > .env

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
          CI: 'true'

      - name: Run Playwright tests
        run: |
          pnpm exec playwright install --with-deps
          mkdir -p playwright-report test-results
          pnpm exec playwright test src/tests/simple-browser-compatibility.test.ts --project=chromium --no-deps
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
          CI: 'true'
          DISABLE_WEB_FONTS: 'true'

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  build:
    name: Build
    needs: [setup, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: Setup environment for build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
        run: |
          echo "Creating .env file for build"
          echo "NODE_ENV=production" > .env

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
          CI: 'true'

      - name: Build application
        run: pnpm build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
          LOG_LEVEL: debug
          LOG_CONSOLE: true
          LOG_AUDIT: true
          CI: 'true'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output-production
          path: dist

  deploy:
    name: Deploy
    needs: [setup, build]
    runs-on: ubuntu-latest
    environment: production
    concurrency:
      group: production_environment
      cancel-in-progress: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output-production
          path: dist

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: Install Vercel CLI
        run: pnpm install -g vercel

      - name: Deploy to production
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "Error: VERCEL_TOKEN is not set. Please configure this secret in your GitHub repository settings."
            exit 1
          fi
          vercel deploy --token="${{ secrets.VERCEL_TOKEN }}" --prod --yes

      - name: Create deployment tags
        run: |
          # Install dependencies for tag manager
          pnpm install --frozen-lockfile

          # Create comprehensive production tags
          node scripts/tag-manager.js create production --message="Production deployment $(date +%Y-%m-%d)" --push

          # Verify tags were created
          echo "Created tags:"
          git tag -l "production-*" --sort=-committerdate | head -5

      - name: Notify deployment status
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "${{ job.status == 'success' && '✅' || '❌' }} Production Deployment Status",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Status:* ${{ job.status == 'success' && '✅ Success' || '❌ Failure' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Timestamp:* $(date +%Y-%m-%d %H:%M:%S)"
                    }
                  ]
                }
              ]
            }
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: ${{ job.status == 'success' && '✅ Production deployment successful' || '❌ Production deployment failed' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
