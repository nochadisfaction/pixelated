name: Deploy Staging

permissions:
  contents: read
  actions: write

on:
  push:
    branches:
      - staging
  workflow_dispatch:

# Environment variables can be defined here
env:
  NODE_ENV: staging

jobs:
  setup:
    name: Setup Versions
    uses: ./.github/workflows/setup-versions.yml

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

  build:
    name: Build
    needs: [setup, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: Setup environment
        run: |
          echo "NODE_ENV=staging" > .env
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: dist

  deploy:
    name: Deploy
    needs: [setup, build]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: dist

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: Create staging tags
        run: |
          # Install dependencies for tag manager
          pnpm install --frozen-lockfile

          # Create staging tags
          node scripts/tag-manager.js create staging --message="Staging deployment $(date +%Y-%m-%d)" --push

          # Verify tags were created
          echo "Created staging tag:"
          git tag -l "staging-*" --sort=-committerdate | head -1

      - name: Deploy to staging
        run: |
          vercel --token ${{ secrets.VERCEL_TOKEN }} --confirm --prod -d dist
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Notify Slack
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "✅ Staging Deployment Successful!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*✅ Staging Deployment Successful!*\n\nBranch: `staging`\nCommitter: ${{ github.actor }}\n<${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}|View Run>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_STAGING_WEBHOOK_URL }}
