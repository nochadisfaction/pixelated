name: Deployment Rollback

on:
  push:
    branches:
      - main
      - staging

permissions: read-all # Set restrictive default at workflow level

# Environment variables can be defined here
env:
  NODE_ENV: production

jobs:
  setup:
    name: Setup Versions
    uses: ./.github/workflows/setup-versions.yml

  rollback-staging:
    name: Rollback Staging
    runs-on: ubuntu-latest
    needs: [setup]
    environment: staging
    if: github.ref == 'refs/heads/staging'
    concurrency:
      group: staging_environment
      cancel-in-progress: true
    permissions:
      contents: write
      deployments: write
      actions: read
      id-token: write
      pages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Determine rollback tag
        id: get-tag
        run: |
          TAGS=$(git tag -l "staging-*" --sort=-committerdate)
          TAG_COUNT=$(echo "$TAGS" | grep -v "^$" | wc -l)

          if [ "$TAG_COUNT" -eq 0 ]; then
            echo "::error::No staging tags found"
            exit 1
          elif [ "$TAG_COUNT" -eq 1 ]; then
            echo "::error::Only one staging tag exists"
            exit 1
          fi

          TAG=$(echo "$TAGS" | sed -n '2p')
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Rolling back to: $TAG"
          git checkout $TAG
        shell: /usr/bin/bash -e {0}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Deploy rollback
        env:
          # API token needs ALL of these permissions:
          # - Account → Cloudflare Pages → Edit
          # - User → User Details → Read
          # - Zone → Zone → Read
          # - Account → Account Settings → Read (may be needed for account identification)
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          npm install -g wrangler
          # Create temporary wrangler config for observability and output dir
          cat > wrangler.toml << EOL
          [observability.logs]
          enabled = true

          pages_build_output_dir = "./dist"
          EOL
          wrangler pages deploy dist --project-name=pixelated --branch=staging

      - name: Create rollback tag
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          git tag rollback-staging-$TIMESTAMP
          git push origin rollback-staging-$TIMESTAMP

  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: [setup]
    environment: production
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: production_environment
      cancel-in-progress: true
    permissions:
      contents: write # Required for git operations (checkout, tag, push)
      deployments: write # Required for deployment operations
      actions: read # Required for reading workflow runs
      id-token: write # Required for authentication
      pages: write # Required for Cloudflare Pages deployments
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Determine rollback tag
        id: get-tag
        run: |
          TAGS=$(git tag -l "production-*" --sort=-committerdate)
          TAG_COUNT=$(echo "$TAGS" | grep -v "^$" | wc -l)

          if [ "$TAG_COUNT" -eq 0 ]; then
            echo "::error::No production tags found"
            exit 1
          elif [ "$TAG_COUNT" -eq 1 ]; then
            echo "::error::Only one production tag exists"
            exit 1
          fi

          TAG=$(echo "$TAGS" | sed -n '2p')
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Rolling back to: $TAG"
          git checkout $TAG
        shell: /usr/bin/bash -e {0}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm build

      - name: Deploy rollback
        env:
          # API token needs ALL of these permissions:
          # - Account → Cloudflare Pages → Edit
          # - User → User Details → Read
          # - Zone → Zone → Read
          # - Account → Account Settings → Read (may be needed for account identification)
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          npm install -g wrangler
          # Create temporary wrangler config for observability and output dir
          cat > wrangler.toml << EOL
          [observability.logs]
          enabled = true

          pages_build_output_dir = "./dist"
          EOL
          wrangler pages deploy dist --project-name=pixelated --branch=production

      - name: Create rollback tag
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          git tag rollback-production-$TIMESTAMP
          git push origin rollback-production-$TIMESTAMP
