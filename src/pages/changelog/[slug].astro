---
import { getCollection, render } from 'astro:content'
import type { CollectionEntry } from 'astro:content'
import type { PostSchema } from '~/content/schema'
import BaseLayout from '~/layouts/BaseLayout.astro'
import StandardLayout from '~/layouts/StandardLayout.astro'
import Toc from '~/components/toc/Toc.astro'
import ShareLink from '~/components/widgets/ShareLink.astro'
import Warning from '~/components/base/Warning.astro'
import { formatDate } from '~/utils/datetime'
import { FEATURES } from '~/config'

// Set prerender to true to generate static pages at build time
export const prerender = true

export async function getStaticPaths() {
  const posts = await getCollection('changelog')
  return posts.map((post: CollectionEntry<'changelog'>) => ({
    params: { slug: post.slug },
    props: { post },
  }))
}

const { post } = Astro.props as { post: CollectionEntry<'changelog'> }
const { data: frontmatter } = post as { data: PostSchema }
const { Content, headings } = await render(post)
const { share, toc } = FEATURES

// Format dates
const pubDate =
  frontmatter.pubDate instanceof Date ? frontmatter.pubDate.toISOString() : null
const updatedDate =
  frontmatter.lastModDate instanceof Date
    ? frontmatter.lastModDate.toISOString()
    : null

// Warning message for unpublished posts
const UNPUBLISHED_WARNING = `This article is not yet available.
Please check back later.`

// Prepare BaseLayout props, only including dates when they exist
const baseLayoutProps: {
  title: string;
  description: string;
  pubDate?: string;
  lastModDate?: string;
} = {
  title: frontmatter.title,
  description: frontmatter.description,
};
if (pubDate) baseLayoutProps.pubDate = pubDate;
if (updatedDate) baseLayoutProps.lastModDate = updatedDate;
---

<BaseLayout {...baseLayoutProps}>
  <StandardLayout title={frontmatter.title}>
    <div slot="head">
      {
        pubDate && (
          <p class="mt--6! op-50">
            <time datetime={pubDate}>{formatDate(pubDate)}</time>
            {updatedDate && (
              <time datetime={updatedDate}>
                | Updated: {formatDate(updatedDate)}
              </time>
            )}
          </p>
        )
      }
      {
        frontmatter.pubDate && new Date(frontmatter.pubDate) > new Date() && (
          <Warning rawHTMLString={UNPUBLISHED_WARNING} />
        )
      }
    </div>
    <div slot="article">
      {Array.isArray(toc) && toc[0] && frontmatter.toc && <Toc {headings} />}
      <Content />
    </div>
  </StandardLayout>
  <div slot="share">
    {
      Array.isArray(share) && share[0] && frontmatter.share && (
        <ShareLink config={share[1]} />
      )
    }
  </div>
</BaseLayout>
